/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authorsCreate } from '../fn/authors/authors-create';
import { AuthorsCreate$Params } from '../fn/authors/authors-create';
import { authorsDelete } from '../fn/authors/authors-delete';
import { AuthorsDelete$Params } from '../fn/authors/authors-delete';
import { authorsList } from '../fn/authors/authors-list';
import { AuthorsList$Params } from '../fn/authors/authors-list';
import { authorsPartialUpdate } from '../fn/authors/authors-partial-update';
import { AuthorsPartialUpdate$Params } from '../fn/authors/authors-partial-update';
import { authorsRead } from '../fn/authors/authors-read';
import { AuthorsRead$Params } from '../fn/authors/authors-read';
import { authorsUpdate } from '../fn/authors/authors-update';
import { AuthorsUpdate$Params } from '../fn/authors/authors-update';

@Injectable({ providedIn: 'root' })
export class AuthorsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authorsList()` */
  static readonly AuthorsListPath = '/authors/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authorsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsList$Response(params?: AuthorsList$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authorsList(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authorsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsList(params?: AuthorsList$Params, context?: HttpContext): Observable<void> {
    return this.authorsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authorsCreate()` */
  static readonly AuthorsCreatePath = '/authors/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authorsCreate()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsCreate$Response(params: AuthorsCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authorsCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authorsCreate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsCreate(params: AuthorsCreate$Params, context?: HttpContext): Observable<void> {
    return this.authorsCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authorsRead()` */
  static readonly AuthorsReadPath = '/authors/{id}/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authorsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsRead$Response(params: AuthorsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authorsRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authorsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsRead(params: AuthorsRead$Params, context?: HttpContext): Observable<void> {
    return this.authorsRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authorsUpdate()` */
  static readonly AuthorsUpdatePath = '/authors/{id}/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authorsUpdate()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsUpdate$Response(params: AuthorsUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authorsUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authorsUpdate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsUpdate(params: AuthorsUpdate$Params, context?: HttpContext): Observable<void> {
    return this.authorsUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authorsDelete()` */
  static readonly AuthorsDeletePath = '/authors/{id}/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authorsDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsDelete$Response(params: AuthorsDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authorsDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authorsDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsDelete(params: AuthorsDelete$Params, context?: HttpContext): Observable<void> {
    return this.authorsDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authorsPartialUpdate()` */
  static readonly AuthorsPartialUpdatePath = '/authors/{id}/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authorsPartialUpdate()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsPartialUpdate$Response(params: AuthorsPartialUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authorsPartialUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authorsPartialUpdate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  authorsPartialUpdate(params: AuthorsPartialUpdate$Params, context?: HttpContext): Observable<void> {
    return this.authorsPartialUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
