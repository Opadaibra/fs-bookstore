/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { booksCreate } from '../fn/books/books-create';
import { BooksCreate$Params } from '../fn/books/books-create';
import { booksDelete } from '../fn/books/books-delete';
import { BooksDelete$Params } from '../fn/books/books-delete';
import { booksList } from '../fn/books/books-list';
import { BooksList$Params } from '../fn/books/books-list';
import { booksPartialUpdate } from '../fn/books/books-partial-update';
import { BooksPartialUpdate$Params } from '../fn/books/books-partial-update';
import { booksRead } from '../fn/books/books-read';
import { BooksRead$Params } from '../fn/books/books-read';
import { booksUpdate } from '../fn/books/books-update';
import { BooksUpdate$Params } from '../fn/books/books-update';

@Injectable({ providedIn: 'root' })
export class BooksService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `booksList()` */
  static readonly BooksListPath = '/books/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `booksList()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksList$Response(params?: BooksList$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return booksList(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `booksList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksList(params?: BooksList$Params, context?: HttpContext): Observable<void> {
    return this.booksList$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `booksCreate()` */
  static readonly BooksCreatePath = '/books/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `booksCreate()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksCreate$Response(params: BooksCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return booksCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `booksCreate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksCreate(params: BooksCreate$Params, context?: HttpContext): Observable<void> {
    return this.booksCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `booksRead()` */
  static readonly BooksReadPath = '/books/{id}/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `booksRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksRead$Response(params: BooksRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return booksRead(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `booksRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksRead(params: BooksRead$Params, context?: HttpContext): Observable<void> {
    return this.booksRead$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `booksUpdate()` */
  static readonly BooksUpdatePath = '/books/{id}/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `booksUpdate()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksUpdate$Response(params: BooksUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return booksUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `booksUpdate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksUpdate(params: BooksUpdate$Params, context?: HttpContext): Observable<void> {
    return this.booksUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `booksDelete()` */
  static readonly BooksDeletePath = '/books/{id}/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `booksDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksDelete$Response(params: BooksDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return booksDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `booksDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksDelete(params: BooksDelete$Params, context?: HttpContext): Observable<void> {
    return this.booksDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `booksPartialUpdate()` */
  static readonly BooksPartialUpdatePath = '/books/{id}/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `booksPartialUpdate()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksPartialUpdate$Response(params: BooksPartialUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return booksPartialUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `booksPartialUpdate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  booksPartialUpdate(params: BooksPartialUpdate$Params, context?: HttpContext): Observable<void> {
    return this.booksPartialUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
